[{"C:\\VScode\\memogamev3\\src\\index.js":"1","C:\\VScode\\memogamev3\\src\\App.js":"2","C:\\VScode\\memogamev3\\src\\contexts\\PlayerProvider.js":"3","C:\\VScode\\memogamev3\\src\\contexts\\StatusProvider.js":"4","C:\\VScode\\memogamev3\\src\\pages\\index.js":"5","C:\\VScode\\memogamev3\\src\\pages\\StartMemo.js":"6","C:\\VScode\\memogamev3\\src\\pages\\MainMemo.js":"7","C:\\VScode\\memogamev3\\src\\firebasedb\\playerRepository.js":"8","C:\\VScode\\memogamev3\\src\\firebasedb\\configFirebase.js":"9","C:\\VScode\\memogamev3\\src\\firebasedb\\auth.js":"10","C:\\VScode\\memogamev3\\src\\forms\\Login.js":"11","C:\\VScode\\memogamev3\\src\\forms\\Signup.js":"12","C:\\VScode\\memogamev3\\src\\forms\\ResetPassword.js":"13","C:\\VScode\\memogamev3\\src\\contexts\\GameProvider.js":"14","C:\\VScode\\memogamev3\\src\\pages\\AlertMemo.js":"15","C:\\VScode\\memogamev3\\src\\components\\LevelMemo.jsx":"16","C:\\VScode\\memogamev3\\src\\components\\DeckMemo.jsx":"17","C:\\VScode\\memogamev3\\src\\components\\HeaderMemo.jsx":"18","C:\\VScode\\memogamev3\\src\\components\\FooterMemo.jsx":"19","C:\\VScode\\memogamev3\\src\\components\\SidebarMemo.jsx":"20","C:\\VScode\\memogamev3\\src\\components\\DivImageCard.jsx":"21","C:\\VScode\\memogamev3\\src\\js\\sound.js":"22","C:\\VScode\\memogamev3\\src\\js\\cards.js":"23","C:\\VScode\\memogamev3\\src\\components\\ClockMemo.jsx":"24","C:\\VScode\\memogamev3\\src\\components\\TopScoresMemo.jsx":"25","C:\\VScode\\memogamev3\\src\\js\\score.js":"26","C:\\VScode\\memogamev3\\src\\firebasedb\\topscoreRepository.js":"27","C:\\VScode\\memogamev3\\src\\firebasedb\\defaultTopScore.js":"28","C:\\VScode\\memogamev3\\src\\components\\TimerHook.jsx":"29","C:\\VScode\\memogamev3\\src\\components\\WeatherMemo.jsx":"30"},{"size":145,"mtime":1608613041799,"results":"31","hashOfConfig":"32"},{"size":550,"mtime":1608498917374,"results":"33","hashOfConfig":"32"},{"size":5073,"mtime":1608678920158,"results":"34","hashOfConfig":"32"},{"size":2459,"mtime":1608634061898,"results":"35","hashOfConfig":"32"},{"size":497,"mtime":1608613023499,"results":"36","hashOfConfig":"32"},{"size":1514,"mtime":1608411081692,"results":"37","hashOfConfig":"32"},{"size":1350,"mtime":1608660058078,"results":"38","hashOfConfig":"32"},{"size":367,"mtime":1608260010308,"results":"39","hashOfConfig":"32"},{"size":863,"mtime":1608100813535,"results":"40","hashOfConfig":"32"},{"size":449,"mtime":1608329881085,"results":"41","hashOfConfig":"32"},{"size":2576,"mtime":1608683675181,"results":"42","hashOfConfig":"32"},{"size":4084,"mtime":1608683632114,"results":"43","hashOfConfig":"32"},{"size":1958,"mtime":1608448243033,"results":"44","hashOfConfig":"32"},{"size":7204,"mtime":1608661257002,"results":"45","hashOfConfig":"32"},{"size":1594,"mtime":1608632769502,"results":"46","hashOfConfig":"32"},{"size":1072,"mtime":1608493764888,"results":"47","hashOfConfig":"32"},{"size":770,"mtime":1608659987967,"results":"48","hashOfConfig":"32"},{"size":2234,"mtime":1608681583654,"results":"49","hashOfConfig":"32"},{"size":334,"mtime":1608433221845,"results":"50","hashOfConfig":"32"},{"size":438,"mtime":1608565436517,"results":"51","hashOfConfig":"32"},{"size":5045,"mtime":1608680623298,"results":"52","hashOfConfig":"32"},{"size":1314,"mtime":1605055375389,"results":"53","hashOfConfig":"32"},{"size":767,"mtime":1608682432267,"results":"54","hashOfConfig":"32"},{"size":3097,"mtime":1608628911578,"results":"55","hashOfConfig":"32"},{"size":2365,"mtime":1608624729806,"results":"56","hashOfConfig":"32"},{"size":3309,"mtime":1608678835891,"results":"57","hashOfConfig":"32"},{"size":1085,"mtime":1608441071997,"results":"58","hashOfConfig":"32"},{"size":467,"mtime":1608629533551,"results":"59","hashOfConfig":"32"},{"size":5174,"mtime":1608680184211,"results":"60","hashOfConfig":"32"},{"size":1569,"mtime":1608681886663,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"eaget6",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"64"},"C:\\VScode\\memogamev3\\src\\index.js",[],["127","128"],"C:\\VScode\\memogamev3\\src\\App.js",[],"C:\\VScode\\memogamev3\\src\\contexts\\PlayerProvider.js",[],"C:\\VScode\\memogamev3\\src\\contexts\\StatusProvider.js",[],"C:\\VScode\\memogamev3\\src\\pages\\index.js",[],"C:\\VScode\\memogamev3\\src\\pages\\StartMemo.js",[],"C:\\VScode\\memogamev3\\src\\pages\\MainMemo.js",[],"C:\\VScode\\memogamev3\\src\\firebasedb\\playerRepository.js",[],"C:\\VScode\\memogamev3\\src\\firebasedb\\configFirebase.js",[],"C:\\VScode\\memogamev3\\src\\firebasedb\\auth.js",[],"C:\\VScode\\memogamev3\\src\\forms\\Login.js",[],"C:\\VScode\\memogamev3\\src\\forms\\Signup.js",[],"C:\\VScode\\memogamev3\\src\\forms\\ResetPassword.js",[],"C:\\VScode\\memogamev3\\src\\contexts\\GameProvider.js",[],"C:\\VScode\\memogamev3\\src\\pages\\AlertMemo.js",[],"C:\\VScode\\memogamev3\\src\\components\\LevelMemo.jsx",[],"C:\\VScode\\memogamev3\\src\\components\\DeckMemo.jsx",[],"C:\\VScode\\memogamev3\\src\\components\\HeaderMemo.jsx",[],"C:\\VScode\\memogamev3\\src\\components\\FooterMemo.jsx",[],"C:\\VScode\\memogamev3\\src\\components\\SidebarMemo.jsx",[],"C:\\VScode\\memogamev3\\src\\components\\DivImageCard.jsx",["129"],"import React, { useEffect, useRef } from 'react';\r\nimport { soundGame } from \"../js/sound.js\";\r\nimport { FromStatusProvider } from '../contexts/StatusProvider';\r\nimport { FromGameProvider } from '../contexts/GameProvider';\r\n\r\nexport default function DivImageCard(props) {\r\n\r\n    const { gameStatus, updateGameStatus, updateCardStatus } = FromGameProvider();\r\n    const { currentStatus, updateStatus } = FromStatusProvider();\r\n\r\n    const didMountRef = useRef(false)\r\n    useEffect(() => {\r\n        if (didMountRef.current) {\r\n            //componentDidUpdate()\r\n            if (window.$isOnEventDeckChange) {\r\n                //console.log(\"isOnEventDeckChange -> false\")\r\n                updateGameStatus({ isOnEventDeckChange: false });\r\n            }\r\n        } else {//componentDidMount()\r\n            //console.log(\"componentDidMount\");\r\n            didMountRef.current = true;\r\n            updateGameStatus({ isOnEventDeckChange: false });\r\n        }\r\n\r\n    }, [props.cardStatus]);\r\n\r\n\r\n    const flipCard = () => {\r\n        if (!gameStatus.isOnEventDeckChange) {\r\n            if (!currentStatus.isGameFinish && !currentStatus.isGameOver && !props.cardStatus.isShowed) {\r\n                if (!currentStatus.isTimerStart) {//The first click will start Clock Memo\r\n                    updateStatus({ isTimerStart: true });\r\n                };\r\n\r\n                if (gameStatus.flippedCards.length < 2) {\r\n                    gameStatus.flippedCards.push(props.cardStatus.cardName);\r\n                    gameStatus.thisSetStates.push(props.keyCard);\r\n                    gameStatus.yourClicks +=1;\r\n                    updateGameStatus({\r\n                        flippedCards: gameStatus.flippedCards,\r\n                        thisSetStates: gameStatus.thisSetStates,\r\n                        //yourClicks: gameStatus.yourClicks,//counting your clicks to flip a card\r\n                    });\r\n\r\n                    updateCardStatus(props.keyCard, { isShowed: !props.cardStatus.isShowed });\r\n                    soundGame(\"Flip a card\");\r\n                    if (gameStatus.flippedCards.length === 2) {\r\n                        //Check the pair of flipped cards \r\n                        let card1 = gameStatus.flippedCards[0];\r\n                        let card2 = gameStatus.flippedCards[1];\r\n                        if (card1[0] === card2[0]) {\r\n                            const suitsCheck = card1[1] + card2[1];\r\n                            const suitPairs = [\"DH\", \"HD\", \"CS\", \"SC\"];\r\n                            if (suitPairs.includes(suitsCheck)) {\r\n                                updateGameStatus({ isCorrectCard: true, isOnEventDeckChange: true });\r\n                            } else {\r\n                                updateGameStatus({ isFlipBackPairCards: true, isOnEventDeckChange: true });\r\n                            }\r\n                        } else {\r\n                            updateGameStatus({ isFlipBackPairCards: true, isOnEventDeckChange: true });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {//Accept click on the next-card during a pair of previous cards on processing\r\n            if (!gameStatus.isNextCard) {\r\n                gameStatus.yourClicks +=1;\r\n                updateGameStatus({\r\n                    isOnEventDeckChange: false,\r\n                    thisSetStatesNextCard: props.keyCard,\r\n                    nextCardName: props.cardStatus.cardName,\r\n                    isNextCard: true,\r\n                    //yourClicks: gameStatus.yourClicks,//counting your clicks to flip a card\r\n                });\r\n                updateCardStatus(props.keyCard, { isShowed: !props.cardStatus.isShowed });\r\n                soundGame(\"Flip a card\");\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    if (!props.cardStatus.isOnDeck) {\r\n        return (\r\n            <div key={props.keyCard}>\r\n                <img\r\n                    key={props.keyCard + 100}\r\n                    className=\"image-goodjob\"\r\n                    src=\"../images/goodjob.png\"\r\n                    alt=\"goodjob\"\r\n                />\r\n            </div>\r\n        )\r\n    } else {\r\n        if (!props.cardStatus.isShowed) {\r\n            return (\r\n                <div key={props.keyCard}>\r\n                    <img\r\n                        key={props.keyCard + 100}\r\n                        className=\"image-card\"\r\n                        src=\"../images/back.png\"\r\n                        alt=\"back\"\r\n                        onClick={flipCard}\r\n                    />\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            let scr = '../images/' + props.cardStatus.cardName + '.png';\r\n            return (\r\n                <div key={props.keyCard}>\r\n                    <img\r\n                        key={props.keyCard + 100}\r\n                        className=\"image-card\"\r\n                        src={scr}\r\n                        alt={props.cardStatus.cardName}\r\n                    />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","C:\\VScode\\memogamev3\\src\\js\\sound.js",[],"C:\\VScode\\memogamev3\\src\\js\\cards.js",["130"],"C:\\VScode\\memogamev3\\src\\components\\ClockMemo.jsx",[],"C:\\VScode\\memogamev3\\src\\components\\TopScoresMemo.jsx",["131"],"\r\nimport React, { useState, useEffect } from 'react'\r\nimport { writeToDatabase } from '../firebasedb/topscoreRepository';\r\nimport { scoreToClock } from '../js/score';\r\nimport { FromGameProvider } from '../contexts/GameProvider';\r\nimport { FromStatusProvider } from '../contexts/StatusProvider';\r\nimport { FromPlayerProvider } from '../contexts/PlayerProvider';\r\n\r\nexport default function TopScoresMemo() {\r\n    const [isUpdated, setIsUpdated] = useState(false);\r\n\r\n    const { level, topScores, gameStatus, updateGameStatus } = FromGameProvider();\r\n    const { currentStatus } = FromStatusProvider();\r\n    const { player } = FromPlayerProvider();\r\n\r\n    useEffect(() => {\r\n        let newGameStatus = {\r\n            forceUpdateTopScores: () => setIsUpdated(!isUpdated)\r\n        };\r\n        updateGameStatus(newGameStatus);\r\n    }, []);\r\n\r\n    const updateTopScoresOnFirebase = async () => {\r\n        if (!currentStatus.isTimerStart && currentStatus.isGameFinish) {\r\n            let i = 1;\r\n            await topScores.forEach(playerScore => {\r\n                level === 16 ? writeToDatabase(i, playerScore, '/topscoreseasy/')\r\n                             : writeToDatabase(i, playerScore, '/topscoreshard/');\r\n                i++;\r\n            })\r\n        }\r\n \r\n        updateGameStatus({ isTopScoresChanged: false });\r\n        setIsUpdated(!isUpdated);\r\n    }\r\n\r\n    return (\r\n        <div className=\"div-topscores-container\">\r\n            <h4>TOP SCORES</h4>\r\n            {level === 16 ? <h5>- Easy Level -</h5>\r\n                : <h5>- Hard Level -</h5>\r\n            }\r\n            <div className=\"div-scroll-topscores\">\r\n                {topScores.map((element) => (\r\n                    <div>\r\n                        {element.uid === player.uid ? <p className=\"top-name\">&#128525; {element.name}</p>\r\n                            : <p className=\"top-name\">{element.name}</p>\r\n                        }\r\n\r\n                        <p className=\"top-score\">{scoreToClock(element.score)}~{element.clicks} clicks</p>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            {gameStatus.isTopScoresChanged ? <button id=\"button_update_firebase\" onClick={updateTopScoresOnFirebase} type=\"button\">Update to Firebase</button>\r\n                : <p id=\"updated_firebase\">- Updated from Firebase -</p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","C:\\VScode\\memogamev3\\src\\js\\score.js",[],"C:\\VScode\\memogamev3\\src\\firebasedb\\topscoreRepository.js",[],"C:\\VScode\\memogamev3\\src\\firebasedb\\defaultTopScore.js",[],"C:\\VScode\\memogamev3\\src\\components\\TimerHook.jsx",["132","133"],"import React, { useState, useEffect, useRef} from \"react\";\r\nimport { FromStatusProvider } from \"../contexts/StatusProvider\";\r\nimport { FromGameProvider } from \"../contexts/GameProvider\";\r\nimport {FromPlayerProvider} from '../contexts/PlayerProvider';\r\nimport {savePlayer} from '../firebasedb/playerRepository';\r\nimport { soundGame } from '../js/sound';\r\nimport { updateTopScores, updateBestScore } from '../js/score';\r\n\r\nlet delay = 0;\r\n\r\nexport default function TimerHook() {\r\n    const [countMiliSecond, setCountMiliSecond] = useState(0);\r\n    \r\n    const { currentStatus, updateStatus } = FromStatusProvider();\r\n    const {level,gameStatus, updateGameStatus, removeCardFromDeck,flipBackPairCards,topScores} = FromGameProvider();\r\n    const {player,updatePlayer} = FromPlayerProvider();\r\n\r\n    const timerInMiliSecond = useRef(null);\r\n    \r\n    useEffect(() => {\r\n        timerInMiliSecond.current = setInterval(() => setCountMiliSecond((c) => c + 1), 1); //1ms\r\n        //console.log(\"DidMout and timeInMiliSecond has run !\");\r\n\r\n        return () => {\r\n            //console.log(\"Unmount and Clear timerInMiliSecond\")\r\n            clearInterval(timerInMiliSecond.current);\r\n        }\r\n    }, []);\r\n\r\n\r\n    if (countMiliSecond>3000) {setCountMiliSecond(0)} \r\n\r\n    //PROCESS IN MILISECOND --------------------------------\r\n    //Has logged in\r\n    if (currentStatus.isLoggedIn) {\r\n        //Have just started Game Memo\r\n        if (currentStatus.isTimerStart) {\r\n            if (!gameStatus.isOnEventDeckChange) {\r\n                //If you have just flipped a correct card \r\n                if (gameStatus.isCorrectCard) {\r\n                    //updateGameStatus({ isOnEventDeckChange: true });//Disable mouse click when remove cards\r\n                    gameStatus.isOnEventDeckChange=true;\r\n                    delay = 1;//Start count for delay\r\n                } else {   //If you have just flipped a wrong card\r\n                    if (gameStatus.isFlipBackPairCards) {\r\n                        //updateGameStatus({ isOnEventDeckChange: true });//Disable mouse click when remove cards\r\n                        gameStatus.isOnEventDeckChange=true;\r\n                        delay = 1;//Start count for delay\r\n                    } else {\r\n                        if (gameStatus.numberCardsOnDeck === 0) {\r\n                            soundGame(\"Well done\");\r\n                            //updateStatus({isGameFinish: true }, null);\r\n                            currentStatus.isGameFinish = true;\r\n                            gameStatus.numberCardsOnDeck = level;//Set back level to update Score\r\n                        }\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                if (gameStatus.isNextCard || delay === 150 || delay === 500) {\r\n                    if (gameStatus.isCorrectCard) {\r\n                        delay = 0;\r\n                        removeCardFromDeck();\r\n                    } else {\r\n                        if (delay === 150) {\r\n                            delay = 151;\r\n                        } else {\r\n                            if (gameStatus.isFlipBackPairCards) {\r\n                                delay = 0;\r\n                                flipBackPairCards();\r\n                                soundGame(\"Flip a card\");\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    delay += 1;\r\n                    if (delay === 50) {\r\n                        if (gameStatus.isCorrectCard) { soundGame(\"Correct card\"); }\r\n                        if (gameStatus.isFlipBackPairCards) { soundGame(\"Wrong card\"); }\r\n                    }\r\n                }\r\n\r\n            }\r\n        } else {\r\n            if (currentStatus.isGameFinish && gameStatus.numberCardsOnDeck===level){\r\n                //update TopScores\r\n                let isTopScoresChanged = updateTopScores(player.uid, player.playerName, gameStatus.yourCount, gameStatus.yourCount, topScores);\r\n                //Call function inside TopScoresMemo to force re-rendering\r\n                if (isTopScoresChanged) { \r\n                    //updateGameStatus({isTopScoresChanged:true, numberCardsOnDeck:level});\r\n                    gameStatus.isTopScoresChanged=true;\r\n                    gameStatus.forceUpdateTopScores()\r\n                    isTopScoresChanged = false; \r\n                }else{\r\n                    //updateGameStatus({isTopScoresChanged:false, numberCardsOnDeck:level});\r\n                    gameStatus.isTopScoresChanged=true;\r\n                }\r\n                //Update Best Score of current player\r\n                console.log()\r\n                let isBestScoreUpdate = updateBestScore(level, player, gameStatus.yourCount, gameStatus.yourCount)\r\n                console.log(isBestScoreUpdate);\r\n                if (isBestScoreUpdate) {\r\n                    savePlayer(player);//Write to Database\r\n                    updatePlayer(player);\r\n                }\r\n                delay = 0;\r\n                gameStatus.numberCardsOnDeck=level+1;\r\n            }\r\n        }\r\n\r\n    } else {\r\n        delay = 0;\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n        </>\r\n    )\r\n}","C:\\VScode\\memogamev3\\src\\components\\WeatherMemo.jsx",["134"],"import React, { useEffect, useState } from 'react';\r\n\r\nexport default function WeatherMemo() {\r\n    const [cityName, setCityName] = useState(\"Saskatoon\");\r\n    const [temp, setTemp] = useState();\r\n    useEffect(() => {\r\n        getWeatherApi();\r\n\r\n    }, [cityName]);\r\n\r\n    async function getWeatherApi() {\r\n        const appid = \"ed52e6534d6e61e9cc976b588820c835\";\r\n        try {\r\n            const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&appid=${appid}`)\r\n            const infor = await response.json();\r\n            setTemp(infor.main.temp);\r\n        }\r\n        catch (err){\r\n            setTemp(\"?\");\r\n        }\r\n            \r\n    }\r\n    \r\n    const handleSelectCity = (event) => {\r\n        setCityName(event.target.value);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"temperature\">\r\n            <div className=\"div-temp\">\r\n                <p>&#9729; <span>{temp}</span> °C</p>\r\n            </div>\r\n            <div className=\"dropdown\">\r\n                <button className=\"dropbtn\">{cityName}</button>\r\n                <div class=\"dropdown-content\">\r\n                    <button value=\"Saskatoon\" onClick={handleSelectCity}>Saskatoon</button>\r\n                    <button value=\"Edmonton\" onClick={handleSelectCity}>Edmonton</button>\r\n                    <button value=\"Calgary\" onClick={handleSelectCity}>Calgary</button>\r\n                    <button value=\"Hanoi\" onClick={handleSelectCity}>Hanoi</button>\r\n                </div>\r\n            </div>\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n",{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":25,"column":8,"nodeType":"141","endLine":25,"endColumn":26,"suggestions":"142"},{"ruleId":"143","severity":1,"message":"144","line":6,"column":10,"nodeType":"145","messageId":"146","endLine":6,"endColumn":22},{"ruleId":"139","severity":1,"message":"147","line":21,"column":8,"nodeType":"141","endLine":21,"endColumn":10,"suggestions":"148"},{"ruleId":"143","severity":1,"message":"149","line":14,"column":28,"nodeType":"145","messageId":"146","endLine":14,"endColumn":40},{"ruleId":"143","severity":1,"message":"150","line":15,"column":30,"nodeType":"145","messageId":"146","endLine":15,"endColumn":46},{"ruleId":"139","severity":1,"message":"151","line":9,"column":8,"nodeType":"141","endLine":9,"endColumn":18,"suggestions":"152"},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateGameStatus'. Either include it or remove the dependency array.","ArrayExpression",["155"],"no-unused-vars","'shuffleArray' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'isUpdated' and 'updateGameStatus'. Either include them or remove the dependency array. You can also do a functional update 'setIsUpdated(i => ...)' if you only need 'isUpdated' in the 'setIsUpdated' call.",["156"],"'updateStatus' is assigned a value but never used.","'updateGameStatus' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getWeatherApi'. Either include it or remove the dependency array.",["157"],"no-global-assign","no-unsafe-negation",{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},"Update the dependencies array to be: [props.cardStatus, updateGameStatus]",{"range":"164","text":"165"},"Update the dependencies array to be: [isUpdated, updateGameStatus]",{"range":"166","text":"167"},"Update the dependencies array to be: [cityName, getWeatherApi]",{"range":"168","text":"169"},[967,985],"[props.cardStatus, updateGameStatus]",[831,833],"[isUpdated, updateGameStatus]",[255,265],"[cityName, getWeatherApi]"]